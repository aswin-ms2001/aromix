<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Add Product | Aromix</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
  <!-- Cropper CSS -->
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/admin-css/adminProductAdding.css" />
  <link rel="stylesheet" href="/css/admin-css/sidebar.css" />
</head>
<body>
  <div class="admin-layout">
    <!-- Sidebar Include -->
    <%- include('./partials/sidebar') %>

    <!-- Main Content -->
    <div class="admin-main">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-white">Add Product</h2>
      </div>

      <div class="card p-4" style="background-color: #2e0e46; border-radius: 20px;">
        <form id="product-form" action="/products/add" method="POST" enctype="multipart/form-data">
          <div class="row g-3">
            <div class="col-md-6">
              <label class="form-label text-white">Product Name*</label>
              <input type="text" name="name" class="form-control" required />
            </div>
            <div class="col-md-6">
              <label class="form-label text-white">Category*</label>
              <select name="category" class="form-select" required>
                <option value="" disabled selected>Select Category</option>
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>::<%= category.name %>"><%= category.name %></option>
                <% }); %>
              </select>
            </div>
            <div class="col-md-6">
              <label class="form-label text-white">Gender*</label>
              <select name="gender" class="form-select" required>
                <option value="" disabled selected>Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Unisex">Unisex</option>
              </select>
            </div>
          </div>

          <h5 class="text-white mt-5">Variants</h5>
          <div id="variants-container"></div>

          <div class="text-center mt-4">
            <button type="button" class="btn btn-secondary" onclick="addVariant()">Add Variant</button>
          </div>
          <div class="text-center mt-4">
            <button type="submit" class="btn btn-primary">Add Product</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Cropper Modal -->
  <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
      <div class="modal-content bg-dark text-white">
        <div class="modal-header">
          <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <img id="cropper-image" />
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="crop-button">Crop & Continue</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>

  <script>
    let uniqueIdCounter = 0;
    let cropper;
    let currentFileInput;

    function addVariant() {
      const container = document.getElementById('variants-container');
      const currentCount = container.querySelectorAll('.variant-row').length;
      const uniqueId = uniqueIdCounter++;
      const isRemovable = currentCount > 0;

      const variantHTML = `
        <div class="variant-row mt-4 p-3 position-relative" style="background-color: #3b3b3b; border-radius: 10px;" data-uid="${uniqueId}">
          <h6 class="text-white variant-heading">Variant ${currentCount + 1}</h6>
          ${isRemovable ? `<button type="button" class="btn-close position-absolute top-0 end-0 m-3" onclick="removeVariant(${uniqueId})"></button>` : ''}
          <div class="row g-3 mt-2">
            <div class="col-md-4">
              <label class="form-label text-white">Volume*</label>
              <input type="number" name="variants[${uniqueId}][volume]" class="form-control variant-volume" required />
            </div>
            <div class="col-md-4">
              <label class="form-label text-white">Price*</label>
              <input type="number" name="variants[${uniqueId}][price]" class="form-control variant-price" required />
            </div>
            <div class="col-md-4">
              <label class="form-label text-white">Stock*</label>
              <input type="number" name="variants[${uniqueId}][stock]" class="form-control variant-stock" required />
            </div>
            <div class="col-md-12">
              <label class="form-label text-white">Description*</label>
              <textarea name="variants[${uniqueId}][description]" rows="3" class="form-control" required></textarea>
            </div>
            ${[1, 2, 3, 4].map(i => `
              <div class="col-md-3 mb-3">
                <label class="form-label text-white">Image ${i}*</label>
                <input type="file" name="variantImages" accept="image/*" class="form-control variant-image-input" required />
              </div>`).join('')}
          </div>
        </div>`;
      
      container.insertAdjacentHTML('beforeend', variantHTML);
      relabelVariants();
    }

    function removeVariant(uid) {
      const row = document.querySelector(`.variant-row[data-uid="${uid}"]`);
      if (row) row.remove();
      relabelVariants();
    }

    function relabelVariants() {
      document.querySelectorAll('.variant-row').forEach((row, index) => {
        row.querySelector('.variant-heading').textContent = `Variant ${index + 1}`;
        const closeBtn = row.querySelector('.btn-close');
        if (closeBtn) closeBtn.style.display = index === 0 ? 'none' : 'block';
      });
    }

    document.getElementById('product-form').addEventListener('submit', function (e) {
      const errors = [];
      document.querySelectorAll('.variant-volume').forEach((el, i) => {
        if (isNaN(el.value) || el.value < 0) errors.push(`Variant ${i + 1}: Volume must be non-negative`);
      });
      document.querySelectorAll('.variant-price').forEach((el, i) => {
        if (isNaN(el.value) || el.value < 0) errors.push(`Variant ${i + 1}: Price must be non-negative`);
      });
      document.querySelectorAll('.variant-stock').forEach((el, i) => {
        if (isNaN(el.value) || el.value < 0) errors.push(`Variant ${i + 1}: Stock must be non-negative`);
      });

      if (errors.length) {
        e.preventDefault();
        alert(errors.join('\n'));
      }
    });

    window.onload = addVariant;

    document.addEventListener('change', function (e) {
      if (e.target.matches('input[type="file"].variant-image-input')) {
        const file = e.target.files[0];
        if (file && file.type.startsWith('image/')) {
          currentFileInput = e.target;
          const reader = new FileReader();
          reader.onload = () => {
            const image = document.getElementById('cropper-image');
            image.src = reader.result;
            const modal = new bootstrap.Modal(document.getElementById('cropperModal'));
            modal.show();

            if (cropper) cropper.destroy();
            cropper = new Cropper(image, {
              aspectRatio: NaN,
              viewMode: 2,
            });
          };
          reader.readAsDataURL(file);
        }
      }
    });

    document.getElementById('crop-button').addEventListener('click', function () {
      if (cropper && currentFileInput) {
        cropper.getCroppedCanvas().toBlob(blob => {
          const newFile = new File([blob], 'cropped_image.png', { type: 'image/png' });
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(newFile);
          currentFileInput.files = dataTransfer.files;
          bootstrap.Modal.getInstance(document.getElementById('cropperModal')).hide();
        });
      }
    });
  </script>
</body>
</html>
