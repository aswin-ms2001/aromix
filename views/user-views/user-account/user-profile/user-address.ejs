<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Address | Aromix</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <!-- <link rel="stylesheet" href="/css/user-css/account.css" /> -->
</head>
<body>

    <%- include('../../partials/header') %>

    <div class="container my-4">


    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
        <%- include('../partials/side-bar') %>
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
                <!-- Breadcrumb -->
            <div class="col-md-9">
            <p class="text-muted mb-2">
                My Profile / <strong >Add New Address</strong>
            </p>

            <div class="card p-4 shadow-sm border-0" style="background-color: #fdfdfd;">
                <h5 class="fw-bold mb-3 text-danger">Address</h5>
                
            </div>
            </div>
        <div class="card p-4">
            <h5 class="fw-bold text-danger">Address</h5>
            <button class="btn btn-danger mb-3" data-bs-toggle="modal" data-bs-target="#addAddressModal">+ Add Address</button>
            <hr>

            <!-- Default Address Section -->
            <div id="defaultAddressSection">
              <% if (defaultAddress) { %>
                <div class="card border rounded p-3 mb-3" style="min-width: 250px ;max-width: 250px; background-color: #fff;">
                  <h6><%= defaultAddress.name %></h6>
                  <p>
                    <%= defaultAddress.house %>, <%= defaultAddress.street %><br>
                    <%= defaultAddress.city %>, <%= defaultAddress.state %><br>
                    <%= defaultAddress.country %> - <%= defaultAddress.pincode %><br>
                    Mobile: <%= defaultAddress.mobile %>
                  </p>
                  <div class="d-flex gap-2">
                    <span class="badge bg-light text-dark border me-auto">Default</span>
                    <button class="btn btn-dark btn-sm"  data-address='<%- JSON.stringify(defaultAddress) %>' onclick="handleEditButton(this)" >Edit</button>
                  </div>
                </div>
              <% } else { %>
                <p class="text-muted">No default address was added.</p>
              <% } %>
            </div>


            <hr>

            <!-- Saved Addresses Section -->
            <div id="savedAddresses" class="d-flex flex-wrap gap-3">
            <% if (otherAddresses && otherAddresses.length > 0) { %>
                <% otherAddresses.forEach((addr) => { %>
                <div class="border rounded p-3" style="min-width: 250px;">
                    <h6><%= addr.name %></h6>
                    <p>
                    <%= addr.house %>, <%= addr.street %><br>
                    <%= addr.city %>, <%= addr.state %><br>
                    <%= addr.country %> - <%= addr.pincode %><br>
                    Mobile: <%= addr.mobile %>
                    </p>
                    <div class="d-flex gap-2">
                    <button class="btn btn-dark btn-sm" data-address='<%- JSON.stringify(addr) %>' onclick="handleEditButton(this)">Edit</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteAddress('<%= addr._id %>')">Delete</button>
                    <% if (!addr.isDefault) { %>
                        <button class="btn btn-outline-secondary btn-sm" onclick="confirmSetDefault('<%= addr._id %>')">Set as Default</button>
                    <% } %>
                    </div>
                </div>
                <% }) %>
            <% } else { %>
                <p class="text-muted">You haven't added any address yet.</p>
            <% } %>
            </div>
        </div>
        </div>
    </div>
    </div>

    <%- include('../../partials/footer') %>

        <!-- Add New Address Modal -->
    <div class="modal fade" id="addAddressModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content p-3">
        <div class="modal-header">
            <h5 class="modal-title">Add New Address</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
            <form id="addAddressForm">
            <div class="row g-3">
                <div class="col-md-6">
                <label>Name</label>
                <input class="form-control" id="addName">
                <div class="text-danger small" id="addNameError"></div>
                </div>
                <div class="col-md-6">
                <label>House Name</label>
                <input class="form-control" id="addHouse">
                <div class="text-danger small" id="addHouseError"></div>
                </div>
                <div class="col-md-6">
                <label>Locality / Street</label>
                <input class="form-control" id="addStreet">
                <div class="text-danger small" id="addStreetError"></div>
                </div>
                <div class="col-md-6">
                <label>Town / City/District</label>
                <input class="form-control" id="addCity">
                <div class="text-danger small" id="addCityError"></div>
                </div>
                <div class="col-md-6">
                <label>State</label>
                <input class="form-control" id="addState">
                <div class="text-danger small" id="addStateError"></div>
                </div>
                <div class="col-md-6">
                <label>Country</label>
                <input class="form-control" id="addCountry">
                <div class="text-danger small" id="addCountryError"></div>
                </div>
                <div class="col-md-6">
                <label>Mobile Number</label>
                <input class="form-control" id="addMobile" maxlength="10">
                <div class="text-danger small" id="addMobileError"></div>
                </div>
                <div class="col-md-6">
                <label>Pincode</label>
                <input class="form-control" id="addPincode" maxlength="6">
                <div class="text-danger small" id="addPincodeError"></div>
                </div>
            </div>
            <div class="d-flex justify-content-end mt-3">
                <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-danger">Save</button>
            </div>
            </form>
        </div>
        </div>
    </div>
    </div>


    <!-- Edit Address Modal -->
    <div class="modal fade" id="editAddressModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content p-3">
        <div class="modal-header">
            <h5 class="modal-title">Edit Address</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
            <form id="editAddressForm">
            <div class="row g-3">
                <div class="col-md-6">
                <label>Name</label>
                <input class="form-control" id="editName">
                <div class="text-danger small" id="editNameError"></div>
                </div>
                <div class="col-md-6">
                <label>House Name</label>
                <input class="form-control" id="editHouse">
                <div class="text-danger small" id="editHouseError"></div>
                </div>
                <div class="col-md-6">
                <label>Locality / Street</label>
                <input class="form-control" id="editStreet">
                <div class="text-danger small" id="editStreetError"></div>
                </div>
                <div class="col-md-6">
                <label>Town / City /District</label>
                <input class="form-control" id="editCity">
                <div class="text-danger small" id="editCityError"></div>
                </div>
                <div class="col-md-6">
                <label>State</label>
                <input class="form-control" id="editState">
                <div class="text-danger small" id="editStateError"></div>
                </div>
                <div class="col-md-6">
                <label>Country</label>
                <input class="form-control" id="editCountry">
                <div class="text-danger small" id="editCountryError"></div>
                </div>
                <div class="col-md-6">
                <label>Mobile Number</label>
                <input class="form-control" id="editMobile" maxlength="10">
                <div class="text-danger small" id="editMobileError"></div>
                </div>
                <div class="col-md-6">
                <label>Pincode</label>
                <input class="form-control" id="editPincode" maxlength="6">
                <div class="text-danger small" id="editPincodeError"></div>
                </div>
            </div>
            <div class="d-flex justify-content-end mt-3">
                <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-danger">Update</button>
            </div>
            </form>
        </div>
        </div>
    </div>
    </div>

    <!-- Confirm Delete Modal -->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-3">
          <div class="modal-body">
            <p>Are you sure you want to delete this address?</p>
            <div class="d-flex justify-content-end">
              <button class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
              <button class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Confirm Set Default Modal -->
    <div class="modal fade" id="confirmDefaultModal" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-3">
          <div class="modal-body">
            <p>Do you want to set this address as your default?</p>
            <div class="d-flex justify-content-end">
              <button class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
              <button class="btn btn-success" id="confirmDefaultBtn">Set as Default</button>
            </div>
          </div>
        </div>
      </div>
    </div>


  <!-- Centered Toast Container -->
  <div class="position-fixed top-50 start-50 translate-middle p-3" style="z-index: 1055">
    <div id="liveToast" class="toast align-items-center text-bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true" style="max-width: 500px; min-height: 10vh;">
      <div class="d-flex">
        <div class="toast-body" id="toastMsg">Success!</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  
<script>
  const addForm = document.getElementById("addAddressForm");
  const editForm = document.getElementById("editAddressForm");
  let selectedDefaultAddressId = null;
  let deleteAddressId = null;
  const allSameDigit = /^([0-9])\1{9}$/;
  // 1. showToast helper
  function showToast(message, type = "primary") {
    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0 show position-fixed top-50 start-50 translate-middle`;
    toast.role = "alert";
    toast.style.zIndex = "1055";
    toast.style.minWidth = "300px";
    toast.style.maxWidth = "500px";
    toast.style.minHeight = "80px";
    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body fs-5">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>`;
    document.body.appendChild(toast);

    setTimeout(() => toast.remove(), 4000);
  }


  // 2. Add Address Submit
  addForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Clear previous errors
    const fields = ["Name", "House", "Street", "City", "State", "Country", "Mobile", "Pincode"];
    fields.forEach(f => document.getElementById(`add${f}Error`).textContent = "");

    try {
      const payload = {
        name: capitalizeWords(document.getElementById("addName").value.trim()),
        house: capitalizeWords(document.getElementById("addHouse").value.trim()),
        street: capitalizeWords(document.getElementById("addStreet").value.trim()),
        city: capitalizeWords(document.getElementById("addCity").value.trim()),
        state: capitalizeWords(document.getElementById("addState").value.trim()),
        country: capitalizeWords(document.getElementById("addCountry").value.trim()),
        mobile: document.getElementById("addMobile").value.trim(),
        pincode: document.getElementById("addPincode").value.trim(),
      };

      let hasError = false;
      const addressPattern = /^(?!\s)(?!.*\s$)[A-Za-z0-9]+(?:\s[A-Za-z0-9]+)*$/;

      // --- Name ---
      if (!payload.name) {
        document.getElementById("addNameError").textContent = "Name cannot be empty.";
        hasError = true;
      } else if (!/^[A-Za-z.\s]{3,40}$/.test(payload.name)) {
        document.getElementById("addNameError").textContent = "Only letters, spaces, and periods allowed (3–40 chars).";
        hasError = true;
      } else if (/^[.\s]/.test(payload.name) || /[.\s]$/.test(payload.name)) {
        document.getElementById("addNameError").textContent = "Name cannot start or end with dot or space.";
        hasError = true;
      } else if (/\.\.|  /.test(payload.name)) {
        document.getElementById("addNameError").textContent = "No consecutive dots or spaces allowed.";
        hasError = true;
      }

      // --- House ---
      if (!payload.house) {
        document.getElementById("addHouseError").textContent = "House name is required.";
        hasError = true;
      } else if (!addressPattern.test(payload.house)) {
        document.getElementById("addHouseError").textContent = "Only letters, numbers, and single spaces allowed. No leading or trailing spaces.";
        hasError = true;
      }

      // --- Street ---
      if (!payload.street) {
        document.getElementById("addStreetError").textContent = "Street is required.";
        hasError = true;
      } else if (!addressPattern.test(payload.street)) {
        document.getElementById("addStreetError").textContent = "Only letters, numbers, and single spaces allowed. No leading or trailing spaces.";
        hasError = true;
      }

      // --- City ---
      if (!payload.city) {
        document.getElementById("addCityError").textContent = "City is required.";
        hasError = true;
      } else if (!addressPattern.test(payload.city)) {
        document.getElementById("addCityError").textContent = "Only letters, numbers, and single spaces allowed. No leading or trailing spaces.";
        hasError = true;
      }

      // --- State ---
      if (!payload.state) {
        document.getElementById("addStateError").textContent = "State is required.";
        hasError = true;
      } else if (!addressPattern.test(payload.state)) {
        document.getElementById("addStateError").textContent = "Only letters, numbers, and single spaces allowed. No leading or trailing spaces.";
        hasError = true;
      }

      // --- Country ---
      if (!payload.country) {
        document.getElementById("addCountryError").textContent = "Country is required.";
        hasError = true;
      } else if (!addressPattern.test(payload.country)) {
        document.getElementById("addCountryError").textContent = "Only letters, numbers, and single spaces allowed. No leading or trailing spaces.";
        hasError = true;
      }

      // --- Mobile ---
      if (!payload.mobile) {
        document.getElementById("addMobileError").textContent = "Mobile number is required.";
        hasError = true;
      } else if (!/^[0-9]{10}$/.test(payload.mobile)) {
        document.getElementById("addMobileError").textContent = "Mobile number must be 10 digits.";
        hasError = true;
      }else if(allSameDigit.test(payload.mobile)){
        document.getElementById("addMobileError").textContent = "Enter Valid Phone Number.";
        hasError = true;
      }

      // --- Pincode ---
      if (!payload.pincode) {
        document.getElementById("addPincodeError").textContent = "Pincode is required.";
        hasError = true;
      } else if (!/^[1-9]\d{5}$/.test(payload.pincode)) {
        document.getElementById("addPincodeError").textContent = "Enter valid Pincode.";
        hasError = true;
      }

      //  Stop if any validation failed
      if (hasError) return;

      const response = await axios.post("/users-address/create-new-address/<%- user.id %>", payload);
      console.log(response)
      if(response.data.success){
        console.log("hai")
        showToast(response.data.message, "success");

        const modal = bootstrap.Modal.getInstance(document.getElementById("addAddressModal"));
        modal.hide();

        addForm.reset();
        setTimeout(()=>{
          location.reload()
        },2000)
        // Optionally reload address list
      }

    } catch (err) {
      if (err.response?.data?.message) {
        const errors = err.response.data.message;
        for (const key in errors) {
          const errorDiv = document.getElementById(`add${capitalize(key)}Error`);
          if (errorDiv) errorDiv.textContent = errors[key];
        }
      } else {
        showToast("Something went wrong", "danger");
      }
    }
  });

  // 3. Edit Address Submit
  editForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const addressId = editForm.getAttribute("data-id"); // must be set before opening modal

    const fields = ["Name", "House", "Street", "City", "State", "Country", "Mobile", "Pincode"];
    fields.forEach(f => document.getElementById(`edit${f}Error`).textContent = "");

    try {
      const payload = {
        name: capitalizeWords(document.getElementById("editName").value.trim()),
        house: capitalizeWords(document.getElementById("editHouse").value.trim()),
        street: capitalizeWords(document.getElementById("editStreet").value.trim()),
        city: capitalizeWords(document.getElementById("editCity").value.trim()),
        state: capitalizeWords(document.getElementById("editState").value.trim()),
        country: capitalizeWords(document.getElementById("editCountry").value.trim()),
        mobile: document.getElementById("editMobile").value.trim(),
        pincode: document.getElementById("editPincode").value.trim(),
      };


    let hasError = false;

    // --- Name Validation ---
    if (!payload.name) {
      document.getElementById("editNameError").textContent = "Name cannot be empty.";
      hasError = true;
    } else if (!/^[A-Za-z.\s]{3,40}$/.test(payload.name)) {
      document.getElementById("editNameError").textContent = "Only letters, spaces, and periods allowed (3–40 chars).";
      hasError = true;
    } else if (/^[.\s]/.test(payload.name) || /[.\s]$/.test(payload.name)) {
      document.getElementById("editNameError").textContent = "Name cannot start or end with dot or space.";
      hasError = true;
    } else if (/\.\.|  /.test(payload.name)) {
      document.getElementById("editNameError").textContent = "No consecutive dots or spaces allowed.";
      hasError = true;
    }

    const addressPattern = /^(?!\s)(?!.*\s$)[A-Za-z0-9]+(?:\s[A-Za-z0-9]+)*$/;

    // --- House ---
    if (!payload.house) {
      document.getElementById("editHouseError").textContent = "House name is required.";
      hasError = true;
    } else if (!addressPattern.test(payload.house)) {
      document.getElementById("editHouseError").textContent = "Only letters, numbers, single spaces allowed.";
      hasError = true;
    }

    // --- Street ---
    if (!payload.street) {
      document.getElementById("editStreetError").textContent = "Street is required.";
      hasError = true;
    } else if (!addressPattern.test(payload.street)) {
      document.getElementById("editStreetError").textContent = "Only letters, numbers, single spaces allowed.";
      hasError = true;
    }

    // --- City ---
    if (!payload.city) {
      document.getElementById("editCityError").textContent = "City is required.";
      hasError = true;
    } else if (!addressPattern.test(payload.city)) {
      document.getElementById("editCityError").textContent = "Only letters, numbers, single spaces allowed.";
      hasError = true;
    }

    // --- State ---
    if (!payload.state) {
      document.getElementById("editStateError").textContent = "State is required.";
      hasError = true;
    } else if (!addressPattern.test(payload.state)) {
      document.getElementById("editStateError").textContent = "Only letters, numbers, single spaces allowed.";
      hasError = true;
    }

    // --- Country ---
    if (!payload.country) {
      document.getElementById("editCountryError").textContent = "Country is required.";
      hasError = true;
    } else if (!addressPattern.test(payload.country)) {
      document.getElementById("editCountryError").textContent = "Only letters, numbers, single spaces allowed.";
      hasError = true;
    }

    // --- Mobile ---
    if (!payload.mobile) {
      document.getElementById("editMobileError").textContent = "Mobile number is required.";
      hasError = true;
    } else if (!/^[0-9]{10}$/.test(payload.mobile)) {
      document.getElementById("editMobileError").textContent = "Mobile number must be 10 digits.";
      hasError = true;
    }else if(allSameDigit.test(payload.mobile)){
      document.getElementById("editMobileError").textContent = "Enter Valid Phone Number.";
      hasError = true;
    }
    // --- Pincode ---
    if (!payload.pincode) {
      document.getElementById("editPincodeError").textContent = "Pincode is required.";
      hasError = true;
    } else if (!/^[1-9]\d{5}$/.test(payload.pincode)) {
      document.getElementById("editPincodeError").textContent = "Enter Valid Pincode.";
      hasError = true;
    }

    // Stop submission if validation fails
    if (hasError) return;      

      const response = await axios.put(`/users-address/edit-address/<%- user.id %>`,{payload,addressId} );

      if(response.data.success){
        showToast(response.data.message, "success");

        const modal = bootstrap.Modal.getInstance(document.getElementById("editAddressModal"));
        modal.hide();
        setTimeout(()=>{
          location.reload();
        },2000)
      }


    } catch (err) {
      if (err.response?.data?.message) {
        showToast(err.response?.data?.message, "danger");
      } else {
        showToast("Something went wrong", "danger");
      }
    }
  });

  function capitalizeWords(str) {
    return str
      .toLowerCase()
      .split(" ")
      .filter(word => word.trim() !== "")
      .map(word => word[0].toUpperCase() + word.slice(1))
      .join(" ");
  }

  function handleEditButton(button) {
  const data = JSON.parse(button.getAttribute("data-address"));
  console.log(data)
  openEditModal(data);
}
  // 4. Function to open edit modal with existing values
  function openEditModal(data) {
    document.getElementById("editName").value = data.name || "";
    document.getElementById("editHouse").value = data.house || "";
    document.getElementById("editStreet").value = data.street || "";
    document.getElementById("editCity").value = data.city || "";
    document.getElementById("editState").value = data.state || "";
    document.getElementById("editCountry").value = data.country || "";
    document.getElementById("editMobile").value = data.mobile || "";
    document.getElementById("editPincode").value = data.pincode || "";

    editForm.setAttribute("data-id", data._id);
    
    const fields = ["Name", "House", "Street", "City", "State", "Country", "Mobile", "Pincode"];
    fields.forEach(f => document.getElementById(`edit${f}Error`).textContent = "");

    const modal = new bootstrap.Modal(document.getElementById("editAddressModal"));
    modal.show();
  }

  //Delete Address
  function deleteAddress(addresId){
    deleteAddressId = addresId;

    const modal = new bootstrap.Modal(document.getElementById("confirmDeleteModal"));
    modal.show()
  }

  document.getElementById("confirmDeleteBtn").addEventListener("click", async () => {
    if (!deleteAddressId) return;

    try {
      const response = await axios.delete(`/users-address/delete-address/<%- user.id %>`, {
        data: { addressId: deleteAddressId }
      });

      if (response.data.success) {
        showToast(response.data.message, "success");

        const modal = bootstrap.Modal.getInstance(document.getElementById("confirmDeleteModal"));
        modal.hide();

        setTimeout(() => location.reload(), 1500);
      } else {
        showToast(response.data.message, "danger");
      }
    } catch (err) {
      console.error(err);
      showToast(err.response?.data?.message || "Something went wrong", "danger");
    }
  });

  //Set Default
  
  function confirmSetDefault(addressId) {
    selectedDefaultAddressId = addressId;

    const modal = new bootstrap.Modal(document.getElementById("confirmDefaultModal"));
    modal.show();
  }

  document.getElementById("confirmDefaultBtn").addEventListener("click", async () => {
    if (!selectedDefaultAddressId) return;
    try {
      const response = await axios.patch(`/users-address/set-default-address/<%- user.id %>`,{selectedDefaultAddressId});
      
      if (response.data.success) {
        showToast(response.data.message, "success");
        const modal = bootstrap.Modal.getInstance(document.getElementById("confirmDefaultModal"));
        modal.hide();

        setTimeout(() => location.reload(), 1500);
      } else {
        showToast(responsed.data.message, "danger");
      }
    } catch (err) {
      console.error(err);
      showToast(err.response.data.message, "danger");
    }
  });

</script>

</body>
</html>
